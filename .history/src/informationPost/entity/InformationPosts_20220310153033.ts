import {  Column,  Entity,  Index,  JoinColumn,  ManyToOne,  OneToMany,  PrimaryGeneratedColumn,} from 'typeorm';import { InformationBookmarks } from './InformationBookmarks';import { InformationComments } from './InformationComments';import { InformationLikes } from './InformationLikes';import { InformationPostImages } from './InformationPostImages';import { Users } from './Users';@Index('userId', ['userId'], {})@Entity('informationPosts', { schema: 'test' })export class InformationPosts {  @PrimaryGeneratedColumn({    type: 'int',    name: 'informationPostId',    unsigned: true,  })  informationPostId: number;  @Column('varchar', { name: 'title', nullable: true, length: 100 })  title: string | null;  @Column('varchar', { name: 'userId', length: 100 })  userId: string;  @Column('text', { name: 'informationContent', nullable: true })  informationContent: string | null;  @Column('int', { name: 'informationBookmarkCount', nullable: true })  informationBookmarkCount: number | null;  @Column('int', { name: 'informationLikeCount', nullable: true })  informationLikeCount: number | null;  @Column('int', {    name: 'informationCommentCount',    nullable: true,    unsigned: true,  })  informationCommentCount: number | null;  @Column('int', { name: 'viewCount', nullable: true, unsigned: true })  viewCount: number | null;  @Column('timestamp', {    name: 'createdAt',    nullable: true,    default: () => 'CURRENT_TIMESTAMP',  })  createdAt: Date | null;  @Column('timestamp', {    name: 'updatedAt',    nullable: true,    default: () => 'CURRENT_TIMESTAMP',  })  updatedAt: Date | null;  @OneToMany(    () => InformationBookmarks,    (informationBookmarks) => informationBookmarks.informationPost,  )  informationBookmarks: InformationBookmarks[];  @OneToMany(    () => InformationComments,    (informationComments) => informationComments.informationPost,  )  informationComments: InformationComments[];  @OneToMany(    () => InformationLikes,    (informationLikes) => informationLikes.informationPost,  )  informationLikes: InformationLikes[];  @OneToMany(    () => InformationPostImages,    (informationPostImages) => informationPostImages.informationPost,  )  informationPostImages: InformationPostImages[];  @ManyToOne(() => Users, (users) => users.informationPosts, {    onDelete: 'NO ACTION',    onUpdate: 'NO ACTION',  })  @JoinColumn([{ name: 'userId', referencedColumnName: 'userId' }])  user: Users;}