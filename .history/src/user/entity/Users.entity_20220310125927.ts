import {  Column,  CreateDateColumn,  Entity,  OneToMany,  UpdateDateColumn,} from 'typeorm';import { Followers } from './Followers.entity';import { InformationComments } from '../../informationPost/entity/InformationComments.entity';import { InformationKeeps } from '../../informationPost/entity/InformationKeeps.entity';import { InformationLoves } from '../../informationPost/entity/InformationLoves.entity';import { InformationPosts } from '../../informationPost/entity/InformationPosts.entity';import { RecruitApplies } from '../../recruitPost/entity/RecruitApplies.entity';import { RecruitComments } from '../../recruitPost/entity/RecruitComments.entity';import { RecruitKeeps } from '../../recruitPost/entity/RecruitKeeps.entity';import { RecruitPosts } from '../../recruitPost/entity/RecruitPosts.entity';import { Notification } from './Notification.entity';import { UserReputation } from './UserReputation.entity';@Entity('users')export class Users {  @Column('varchar', { primary: true, name: 'userId', length: 255 })  userId: string;  @Column('varchar', { name: 'nickname', length: 255 })  nickname: string;  @Column('varchar', { name: 'profileImgUrl', nullable: true, length: 255 })  profileImgUrl: string | null;  @Column('varchar', { name: 'technologyStack', nullable: true, length: 255 })  technologyStack: string | null;  @Column('int', {    name: 'activityPoint',    default: () => 0,  })  activityPoint: number;  @Column('text', { name: 'selfIntroduction', nullable: true })  selfIntroduction: string | null;  @Column('varchar', { name: 'portfolioUrl', nullable: true, length: 255 })  portfolioUrl: string | null;  @Column('varchar', { name: 'password', length: 255 })  password: string;  @Column('int', { name: 'loginType' })  loginType: number;  @Column('varchar', { name: 'loginToken', length: 255 })  loginToken: string;  @Column('tinyint', {    name: 'isValid',    nullable: true,    width: 1,    default: () => 1,  })  isValid: boolean;  @CreateDateColumn()  createdAt: Date;  @UpdateDateColumn()  updatedAt: Date;  @OneToMany(() => Followers, (followers) => followers.Follow)  Follow: Followers[];  @OneToMany(() => Followers, (followers) => followers.Follower)  Follower: Followers[];  @OneToMany(    () => InformationKeeps,    (informationKeeps) => informationKeeps.User,  )  InformationKeep: InformationKeeps[];  @OneToMany(    () => InformationComments,    (informationComments) => informationComments.User,  )  InformationComment: InformationComments[];  @OneToMany(    () => InformationLoves,    (informationLoves) => informationLoves.User,  )  InformationLove: InformationLoves[];  @OneToMany(    () => InformationPosts,    (informationPosts) => informationPosts.User,  )  InformationPost: InformationPosts[];  @OneToMany(    () => Notification,    (notification) => notification.NotificationReceiver,  )  NotificationReceiver: Notification[];  @OneToMany(    () => Notification,    (notification) => notification.NotificationSender,  )  NotificationSender: Notification[];  @OneToMany(() => RecruitApplies, (recruitApplies) => recruitApplies.Applicant)  RecruitApply: RecruitApplies[];  @OneToMany(() => RecruitKeeps, (recruitKeeps) => recruitKeeps.User)  RecruitKeep: RecruitKeeps[];  @OneToMany(() => RecruitComments, (recruitComments) => recruitComments.User)  RecruitComment: RecruitComments[];  @OneToMany(() => RecruitPosts, (recruitPosts) => recruitPosts.User)  RecruitPost: RecruitPosts[];  @OneToMany(    () => UserReputation,    (userReputation) => userReputation.userReputationSender,  )  UserReputationSender: UserReputation[];  @OneToMany(    () => UserReputation,    (userReputation) => userReputation.userReputationReceiver,  )  UserReputationReceiver: UserReputation[];}